import inst from '../operations/cpuInstructions';
import { format } from '../../../utils/utils';

import {
  getPrefixCBOpcodeLabels,
  getPrefixCBOpcodeLabel,
} from './prefixCBOpcodesMap';

// prettier-ignore
const opcodesMap = [
    // OFFSET 0x00 ----------------------------------------------------------
    /* 0x00 NOP         */ cpu => inst.NOP(cpu),
    /* 0x01 LD BC,d16   */ cpu => inst.LD16_RR_d16(cpu, 'BC'),
    /* 0x02 LD (BC),A   */ cpu => inst.LD8_$RR_R(cpu, 'BC', 'A'),
    /* 0x03 INC BC      */ cpu => inst.INC16_RR(cpu, 'BC'),
    /* 0x04 INC B       */ cpu => inst.INC8_R(cpu, 'B'),
    /* 0x05 DEC B       */ cpu => inst.DEC8_R(cpu, 'B'),
    /* 0x06 LD B,d8     */ cpu => inst.LD8_R_d8(cpu, 'B'),
    /* 0x07 LD B,d8     */ cpu => inst.RLCA(cpu),
    /* 0x08 LD (a16),SP */ cpu => inst.LD16_$a16_SP(cpu),
    /* 0x09 ADD HL,BC   */ cpu => inst.ADD16_RR_RR(cpu, 'HL', 'BC'),
    /* 0x0A LD A,(BC)   */ cpu => inst.LD8_R_$RR(cpu, 'A', 'BC'),
    /* 0x0B DEC BC      */ cpu => inst.DEC16_RR(cpu, 'BC'),
    /* 0x0C INC C       */ cpu => inst.INC8_R(cpu, 'C'),
    /* 0x0D DEC C       */ cpu => inst.DEC8_R(cpu, 'C'),
    /* 0x0E LD C,d8     */ cpu => inst.LD8_R_d8(cpu, 'C'),
    /* 0x0F RRCA        */ cpu => inst.RRCA(cpu),

    // OFFSET 0x10 ----------------------------------------------------------
    /* 0x10 STOP 0      */ cpu => inst.STOP(cpu),
    /* 0x11 LD DE,d16   */ cpu => inst.LD16_RR_d16(cpu, 'DE'),
    /* 0x12 LD (DE),A   */ cpu => inst.LD8_$RR_R(cpu, 'DE', 'A'),
    /* 0x13 INC DE      */ cpu => inst.INC16_RR(cpu, 'DE'),
    /* 0x14 INC D       */ cpu => inst.INC8_R(cpu, 'D'),
    /* 0x15 DEC D       */ cpu => inst.DEC8_R(cpu, 'D'),
    /* 0x16 LD D,d8     */ cpu => inst.LD8_R_d8(cpu, 'D'),
    /* 0x17 RLA         */ cpu => inst.RLA(cpu),
    /* 0x18 JR r8       */ cpu => inst.JR_r8(cpu),
    /* 0x19 ADD HL,DE   */ cpu => inst.ADD16_RR_RR(cpu, 'HL', 'DE'),
    /* 0x1A LD A,(DE)   */ cpu => inst.LD8_R_$RR(cpu, 'A', 'DE'),
    /* 0x1B DEC DE      */ cpu => inst.DEC16_RR(cpu, 'DE'),
    /* 0x1C INC E       */ cpu => inst.INC8_R(cpu, 'E'),
    /* 0x1D DEC E       */ cpu => inst.DEC8_R(cpu, 'E'),
    /* 0x1E LD E,d8     */ cpu => inst.LD8_R_d8(cpu, 'E'),
    /* 0x1F RRA         */ cpu => inst.RRA(cpu),

    // OFFSET 0x20 ----------------------------------------------------------
    /* 0x20 JR NZ,r8    */ cpu => inst.JR_NF_r8(cpu, 'Z'),
    /* 0x21 LD HL,d16   */ cpu => inst.LD16_RR_d16(cpu, 'HL'),
    /* 0x22 LD (HL+),A  */ cpu => inst.LD8_$RRp_R(cpu, 'HL', 'A'),
    /* 0x23 INC HL      */ cpu => inst.INC16_RR(cpu, 'HL'),
    /* 0x24 INC H       */ cpu => inst.INC8_R(cpu, 'H'),
    /* 0x25 DEC H       */ cpu => inst.DEC8_R(cpu, 'H'),
    /* 0x26 LD H,d8     */ cpu => inst.LD8_R_d8(cpu, 'H'),
    /* 0x27 DAA         */ cpu => inst.DAA8(cpu),
    /* 0x28 JR Z,r8     */ cpu => inst.JR_F_r8(cpu, 'Z'),
    /* 0x29 ADD HL,HL   */ cpu => inst.ADD16_RR_RR(cpu, 'HL', 'HL'),
    /* 0x2A LD A,(HL+)  */ cpu => inst.LD8_R_$RRp(cpu, 'A', 'HL'),
    /* 0x2B DEC HL      */ cpu => inst.DEC16_RR(cpu, 'HL'),
    /* 0x2C INC L       */ cpu => inst.INC8_R(cpu, 'L'),
    /* 0x2D DEC L       */ cpu => inst.DEC8_R(cpu, 'L'),
    /* 0x2E LD L,d8     */ cpu => inst.LD8_R_d8(cpu, 'L'),
    /* 0x2F CPL         */ cpu => inst.CPL8(cpu),

    // OFFSET 0x30 ----------------------------------------------------------
    /* 0x30 JR NC,r8    */ cpu => inst.JR_NF_r8(cpu, 'C'),
    /* 0x31 LD SP,d16   */ cpu => inst.LD16_SP_d16(cpu),
    /* 0x32 LD (HL-),A  */ cpu => inst.LD8_$RRm_R(cpu, 'HL', 'A'),
    /* 0x33 INC SP      */ cpu => inst.INC16_SP(cpu),
    /* 0x34 INC (HL)    */ cpu => inst.INC8_$RR(cpu, 'HL'),
    /* 0x35 DEC (HL)    */ cpu => inst.DEC8_$RR(cpu, 'HL'),
    /* 0x36 LD (HL),d8  */ cpu => inst.LD8_$RR_d8(cpu, 'HL'),
    /* 0x37 SCF         */ cpu => inst.SCF8(cpu),
    /* 0x38 JR C,r8     */ cpu => inst.JR_F_r8(cpu, 'C'),
    /* 0x39 ADD HL,SP   */ cpu => inst.ADD16_RR_SP(cpu, 'HL'),
    /* 0x3A LD A,(HL-)  */ cpu => inst.LD8_R_$RRm(cpu, 'A', 'HL'),
    /* 0x3B DEC SP      */ cpu => inst.DEC16_SP(cpu),
    /* 0x3C INC A       */ cpu => inst.INC8_R(cpu, 'A'),
    /* 0x3D DEC A       */ cpu => inst.DEC8_R(cpu, 'A'),
    /* 0x3E LD A,d8     */ cpu => inst.LD8_R_d8(cpu, 'A'),
    /* 0x3F CCF         */ cpu => inst.CCF8(cpu),

    // OFFSET 0x40 ----------------------------------------------------------
    /* 0x40 LD B,B      */ cpu => inst.LD8_R_R(cpu, 'B', 'B'),
    /* 0x41 LD B,C      */ cpu => inst.LD8_R_R(cpu, 'B', 'C'),
    /* 0x42 LD B,D      */ cpu => inst.LD8_R_R(cpu, 'B', 'D'),
    /* 0x43 LD B,E      */ cpu => inst.LD8_R_R(cpu, 'B', 'E'),
    /* 0x44 LD B,H      */ cpu => inst.LD8_R_R(cpu, 'B', 'H'),
    /* 0x45 LD B,L      */ cpu => inst.LD8_R_R(cpu, 'B', 'L'),
    /* 0x46 LD B,(HL)   */ cpu => inst.LD8_R_$RR(cpu, 'B', 'HL'),
    /* 0x47 LD B,A      */ cpu => inst.LD8_R_R(cpu, 'B', 'A'),
    /* 0x48 LD C,B      */ cpu => inst.LD8_R_R(cpu, 'C', 'B'),
    /* 0x49 LD C,C      */ cpu => inst.LD8_R_R(cpu, 'C', 'C'),
    /* 0x4A LD C,D      */ cpu => inst.LD8_R_R(cpu, 'C', 'D'),
    /* 0x4B LD C,E      */ cpu => inst.LD8_R_R(cpu, 'C', 'E'),
    /* 0x4C LD C,H      */ cpu => inst.LD8_R_R(cpu, 'C', 'H'),
    /* 0x4D LD C,L      */ cpu => inst.LD8_R_R(cpu, 'C', 'L'),
    /* 0x4E LD C,(HL)   */ cpu => inst.LD8_R_$RR(cpu, 'C', 'HL'),
    /* 0x4F LD C,A      */ cpu => inst.LD8_R_R(cpu, 'C', 'A'),

    // OFFSET 0x50 ----------------------------------------------------------
    /* 0x50 LD D,B      */ cpu => inst.LD8_R_R(cpu, 'D', 'B'),
    /* 0x51 LD D,C      */ cpu => inst.LD8_R_R(cpu, 'D', 'C'),
    /* 0x52 LD D,D      */ cpu => inst.LD8_R_R(cpu, 'D', 'D'),
    /* 0x53 LD D,E      */ cpu => inst.LD8_R_R(cpu, 'D', 'E'),
    /* 0x54 LD D,H      */ cpu => inst.LD8_R_R(cpu, 'D', 'H'),
    /* 0x55 LD D,L      */ cpu => inst.LD8_R_R(cpu, 'D', 'L'),
    /* 0x56 LD D,(HL)   */ cpu => inst.LD8_R_$RR(cpu, 'D', 'HL'),
    /* 0x57 LD D,A      */ cpu => inst.LD8_R_R(cpu, 'D', 'A'),
    /* 0x58 LD E,B      */ cpu => inst.LD8_R_R(cpu, 'E', 'B'),
    /* 0x59 LD E,C      */ cpu => inst.LD8_R_R(cpu, 'E', 'C'),
    /* 0x5A LD E,D      */ cpu => inst.LD8_R_R(cpu, 'E', 'D'),
    /* 0x5B LD E,E      */ cpu => inst.LD8_R_R(cpu, 'E', 'E'),
    /* 0x5C LD E,H      */ cpu => inst.LD8_R_R(cpu, 'E', 'H'),
    /* 0x5D LD E,L      */ cpu => inst.LD8_R_R(cpu, 'E', 'L'),
    /* 0x5E LD E,(HL)   */ cpu => inst.LD8_R_$RR(cpu, 'E', 'HL'),
    /* 0x5F LD E,A      */ cpu => inst.LD8_R_R(cpu, 'E', 'A'),

    // OFFSET 0x60 ----------------------------------------------------------
    /* 0x60 LD H,B      */ cpu => inst.LD8_R_R(cpu, 'H', 'B'),
    /* 0x61 LD H,C      */ cpu => inst.LD8_R_R(cpu, 'H', 'C'),
    /* 0x62 LD H,D      */ cpu => inst.LD8_R_R(cpu, 'H', 'D'),
    /* 0x63 LD H,E      */ cpu => inst.LD8_R_R(cpu, 'H', 'E'),
    /* 0x64 LD H,H      */ cpu => inst.LD8_R_R(cpu, 'H', 'H'),
    /* 0x65 LD H,L      */ cpu => inst.LD8_R_R(cpu, 'H', 'L'),
    /* 0x66 LD H,(HL)   */ cpu => inst.LD8_R_$RR(cpu, 'H', 'HL'),
    /* 0x67 LD H,A      */ cpu => inst.LD8_R_R(cpu, 'H', 'A'),
    /* 0x68 LD L,B      */ cpu => inst.LD8_R_R(cpu, 'L', 'B'),
    /* 0x69 LD L,C      */ cpu => inst.LD8_R_R(cpu, 'L', 'C'),
    /* 0x6A LD L,D      */ cpu => inst.LD8_R_R(cpu, 'L', 'D'),
    /* 0x6B LD L,E      */ cpu => inst.LD8_R_R(cpu, 'L', 'E'),
    /* 0x6C LD L,H      */ cpu => inst.LD8_R_R(cpu, 'L', 'H'),
    /* 0x6D LD L,L      */ cpu => inst.LD8_R_R(cpu, 'L', 'L'),
    /* 0x6E LD L,(HL)   */ cpu => inst.LD8_R_$RR(cpu, 'L', 'HL'),
    /* 0x6F LD L,A      */ cpu => inst.LD8_R_R(cpu, 'L', 'A'),

    // OFFSET 0x70 ----------------------------------------------------------
    /* 0x70 LD (HL),B   */ cpu => inst.LD8_$RR_R(cpu, 'HL', 'B'),
    /* 0x71 LD (HL),C   */ cpu => inst.LD8_$RR_R(cpu, 'HL', 'C'),
    /* 0x72 LD (HL),D   */ cpu => inst.LD8_$RR_R(cpu, 'HL', 'D'),
    /* 0x73 LD (HL),E   */ cpu => inst.LD8_$RR_R(cpu, 'HL', 'E'),
    /* 0x74 LD (HL),H   */ cpu => inst.LD8_$RR_R(cpu, 'HL', 'H'),
    /* 0x75 LD (HL),L   */ cpu => inst.LD8_$RR_R(cpu, 'HL', 'L'),
    /* 0x76 HALT        */ cpu => inst.HALT(cpu),
    /* 0x77 LD (HL),A   */ cpu => inst.LD8_$RR_R(cpu, 'HL', 'A'),
    /* 0x78 LD A,B      */ cpu => inst.LD8_R_R(cpu, 'A', 'B'),
    /* 0x79 LD A,C      */ cpu => inst.LD8_R_R(cpu, 'A', 'C'),
    /* 0x7A LD A,D      */ cpu => inst.LD8_R_R(cpu, 'A', 'D'),
    /* 0x7B LD A,E      */ cpu => inst.LD8_R_R(cpu, 'A', 'E'),
    /* 0x7C LD A,H      */ cpu => inst.LD8_R_R(cpu, 'A', 'H'),
    /* 0x7D LD A,L      */ cpu => inst.LD8_R_R(cpu, 'A', 'L'),
    /* 0x7E LD A,(HL)   */ cpu => inst.LD8_R_$RR(cpu, 'A', 'HL'),
    /* 0x7F LD A,A      */ cpu => inst.LD8_R_R(cpu, 'A', 'A'),

    // OFFSET 0x80 ----------------------------------------------------------
    /* 0x80 ADD A,B     */ cpu => inst.ADD8_R_R(cpu, 'A', 'B'),
    /* 0x81 ADD A,C     */ cpu => inst.ADD8_R_R(cpu, 'A', 'C'),
    /* 0x82 ADD A,D     */ cpu => inst.ADD8_R_R(cpu, 'A', 'D'),
    /* 0x83 ADD A,E     */ cpu => inst.ADD8_R_R(cpu, 'A', 'E'),
    /* 0x84 ADD A,H     */ cpu => inst.ADD8_R_R(cpu, 'A', 'H'),
    /* 0x85 ADD A,L     */ cpu => inst.ADD8_R_R(cpu, 'A', 'L'),
    /* 0x86 ADD A,(HL)  */ cpu => inst.ADD8_R_$RR(cpu, 'A', 'HL'),
    /* 0x87 ADD A,A     */ cpu => inst.ADD8_R_R(cpu, 'A', 'A'),
    /* 0x88 ADC A,B     */ cpu => inst.ADC8_R_R(cpu, 'A', 'B'),
    /* 0x89 ADC A,C     */ cpu => inst.ADC8_R_R(cpu, 'A', 'C'),
    /* 0x8A ADC A,D     */ cpu => inst.ADC8_R_R(cpu, 'A', 'D'),
    /* 0x8B ADC A,E     */ cpu => inst.ADC8_R_R(cpu, 'A', 'E'),
    /* 0x8C ADC A,H     */ cpu => inst.ADC8_R_R(cpu, 'A', 'H'),
    /* 0x8D ADC A,L     */ cpu => inst.ADC8_R_R(cpu, 'A', 'L'),
    /* 0x8E ADC A,(HL)  */ cpu => inst.ADC8_R_$RR(cpu, 'A', 'HL'),
    /* 0x8F ADC A,A     */ cpu => inst.ADC8_R_R(cpu, 'A', 'A'),

    // OFFSET 0x90 ----------------------------------------------------------
    /* 0x90 SUB B       */ cpu => inst.SUB8_R(cpu, 'B'),
    /* 0x91 SUB C       */ cpu => inst.SUB8_R(cpu, 'C'),
    /* 0x92 SUB D       */ cpu => inst.SUB8_R(cpu, 'D'),
    /* 0x93 SUB E       */ cpu => inst.SUB8_R(cpu, 'E'),
    /* 0x94 SUB H       */ cpu => inst.SUB8_R(cpu, 'H'),
    /* 0x95 SUB L       */ cpu => inst.SUB8_R(cpu, 'L'),
    /* 0x96 SUB (HL)    */ cpu => inst.SUB8_$RR(cpu, 'HL'),
    /* 0x97 SUB A       */ cpu => inst.SUB8_R(cpu, 'A'),
    /* 0x98 SBC A,B     */ cpu => inst.SBC8_R_R(cpu, 'A', 'B'),
    /* 0x99 SBC A,C     */ cpu => inst.SBC8_R_R(cpu, 'A', 'C'),
    /* 0x9A SBC A,D     */ cpu => inst.SBC8_R_R(cpu, 'A', 'D'),
    /* 0x9B SBC A,E     */ cpu => inst.SBC8_R_R(cpu, 'A', 'E'),
    /* 0x9C SBC A,H     */ cpu => inst.SBC8_R_R(cpu, 'A', 'H'),
    /* 0x9D SBC A,L     */ cpu => inst.SBC8_R_R(cpu, 'A', 'L'),
    /* 0x9E SBC A,(HL)  */ cpu => inst.SBC8_R_$RR(cpu, 'A', 'HL'),
    /* 0x9F SBC A,A     */ cpu => inst.SBC8_R_R(cpu, 'A', 'A'),

    // OFFSET 0xA0 ----------------------------------------------------------
    /* 0xA0 AND B       */ cpu => inst.AND8_R(cpu, 'B'),
    /* 0xA1 AND C       */ cpu => inst.AND8_R(cpu, 'C'),
    /* 0xA2 AND D       */ cpu => inst.AND8_R(cpu, 'D'),
    /* 0xA3 AND E       */ cpu => inst.AND8_R(cpu, 'E'),
    /* 0xA4 AND H       */ cpu => inst.AND8_R(cpu, 'H'),
    /* 0xA5 AND L       */ cpu => inst.AND8_R(cpu, 'L'),
    /* 0xA6 AND (HL)    */ cpu => inst.AND8_$RR(cpu, 'HL'),
    /* 0xA7 AND A       */ cpu => inst.AND8_R(cpu, 'A'),
    /* 0xA8 XOR B       */ cpu => inst.XOR8_A_R(cpu, 'B'),
    /* 0xA9 XOR C       */ cpu => inst.XOR8_A_R(cpu, 'C'),
    /* 0xAA XOR D       */ cpu => inst.XOR8_A_R(cpu, 'D'),
    /* 0xAB XOR E       */ cpu => inst.XOR8_A_R(cpu, 'E'),
    /* 0xAC XOR H       */ cpu => inst.XOR8_A_R(cpu, 'H'),
    /* 0xAD XOR L       */ cpu => inst.XOR8_A_R(cpu, 'L'),
    /* 0xAE XOR (HL)    */ cpu => inst.XOR8_$RR(cpu, 'HL'),
    /* 0xAF XOR A       */ cpu => inst.XOR8_A_R(cpu, 'A'),

    // OFFSET 0xB0 ----------------------------------------------------------
    /* 0xB0 OR B        */ cpu => inst.OR8_R(cpu, 'B'),
    /* 0xB1 OR C        */ cpu => inst.OR8_R(cpu, 'C'),
    /* 0xB2 OR D        */ cpu => inst.OR8_R(cpu, 'D'),
    /* 0xB3 OR E        */ cpu => inst.OR8_R(cpu, 'E'),
    /* 0xB4 OR H        */ cpu => inst.OR8_R(cpu, 'H'),
    /* 0xB5 OR L        */ cpu => inst.OR8_R(cpu, 'L'),
    /* 0xB6 OR (HL)     */ cpu => inst.OR8_$RR(cpu, 'HL'),
    /* 0xB7 OR A        */ cpu => inst.OR8_R(cpu, 'A'),
    /* 0xB8 CP B        */ cpu => inst.CP8_R(cpu, 'B'),
    /* 0xB9 CP C        */ cpu => inst.CP8_R(cpu, 'C'),
    /* 0xBA CP D        */ cpu => inst.CP8_R(cpu, 'D'),
    /* 0xBB CP E        */ cpu => inst.CP8_R(cpu, 'E'),
    /* 0xBC CP H        */ cpu => inst.CP8_R(cpu, 'H'),
    /* 0xBD CP L        */ cpu => inst.CP8_R(cpu, 'L'),
    /* 0xBE CP (HL)     */ cpu => inst.CP8_$RR(cpu, 'HL'),
    /* 0xBF CP A        */ cpu => inst.CP8_R(cpu, 'A'),


    // OFFSET 0xC0 ----------------------------------------------------------
    /* 0xC0 RET NZ      */ cpu => inst.RET_NF(cpu, 'Z'),
    /* 0xC1 POP BC      */ cpu => inst.POP16_RR(cpu, 'BC'),
    /* 0xC2 JP NZ,a16   */ cpu => inst.JP_NF_a16(cpu, 'Z'),
    /* 0xC3 JP a16      */ cpu => inst.JP_a16(cpu),
    /* 0xC4 CALL NZ,a16 */ cpu => inst.CALL_NF_a16(cpu, 'Z'),
    /* 0xC5 PUSH BC     */ cpu => inst.PUSH16_RR(cpu, 'BC'),
    /* 0xC6 ADD A,d8    */ cpu => inst.ADD8_R_d8(cpu, 'A'),
    /* 0xC7 RST 00H     */ cpu => inst.RST_XXH(cpu, 0x00),
    /* 0xC8 RET Z       */ cpu => inst.RET_F(cpu, 'Z'),
    /* 0xC9 RET         */ cpu => inst.RET(cpu),
    /* 0xCA JP Z,a16    */ cpu => inst.JP_F_a16(cpu, 'Z'),
    /* 0xCB PREFIX CB   */ cpu => inst.PREFIX_CB(cpu),
    /* 0xCC CALL Z,a16  */ cpu => inst.CALL_F_a16(cpu, 'Z'),
    /* 0xCD CALL a16    */ cpu => inst.CALL_a16(cpu),
    /* 0xCE ADC A,d8    */ cpu => inst.ADC8_R_d8(cpu, 'A'),
    /* 0xCF RST 08H     */ cpu => inst.RST_XXH(cpu, 0x08),

    // OFFSET 0xD0 ----------------------------------------------------------
    /* 0xD0 RET NC      */ cpu => inst.RET_NF(cpu, 'C'),
    /* 0xD1 POP DE      */ cpu => inst.POP16_RR(cpu, 'DE'),
    /* 0xD2 JP NC,a16   */ cpu => inst.JP_NF_a16(cpu, 'C'),
    /* 0xD3 NOT_IMPL    */ cpu => inst.NOT_IMPLEMENTED(cpu, '0xD3'),
    /* 0xD4 CALL NC,a16 */ cpu => inst.CALL_NF_a16(cpu, 'C'),
    /* 0xD5 PUSH DE     */ cpu => inst.PUSH16_RR(cpu, 'DE'),
    /* 0xD6 SUB d8      */ cpu => inst.SUB8_d8(cpu),
    /* 0xD7 RST 10H     */ cpu => inst.RST_XXH(cpu, 0x10),
    /* 0xD8 RET C       */ cpu => inst.RET_F(cpu, 'C'),
    /* 0xD9 RETI        */ cpu => inst.RETI(cpu),
    /* 0xDA JP C,a16    */ cpu => inst.JP_F_a16(cpu, 'C'),
    /* 0xDB NOT_IMPL    */ cpu => inst.NOT_IMPLEMENTED(cpu, '0xDB'),
    /* 0xDC CALL C,a16  */ cpu => inst.CALL_F_a16(cpu, 'C'),
    /* 0xDD NOT_IMPL    */ cpu => inst.NOT_IMPLEMENTED(cpu, '0xDD'),
    /* 0xDE SBC A,d8    */ cpu => inst.SBC8_R_d8(cpu, 'A'),
    /* 0xDF RST 18H     */ cpu => inst.RST_XXH(cpu, 0x18),

    // OFFSET 0xE0 ----------------------------------------------------------
    /* 0xE0 LDH (a8),A  */ cpu => inst.LD8H_$a8_R(cpu, 'A'),
    /* 0xE1 POP HL      */ cpu => inst.POP16_RR(cpu, 'HL'),
    /* 0xE2 LD (C),A    */ cpu => inst.LD8_$R_R(cpu, 'C', 'A'),
    /* 0xE3 NOT_IMPL    */ cpu => inst.NOT_IMPLEMENTED(cpu, '0xE3'),
    /* 0xE4 NOT_IMPL    */ cpu => inst.NOT_IMPLEMENTED(cpu, '0xE4'),
    /* 0xE5 PUSH HL     */ cpu => inst.PUSH16_RR(cpu, 'HL'),
    /* 0xE6 AND d8      */ cpu => inst.AND8_d8(cpu),
    /* 0xE7 RST 20H     */ cpu => inst.RST_XXH(cpu, 0x20),
    /* 0xE8 ADD SP,r8   */ cpu => inst.ADD16_SP_r8(cpu),
    /* 0xE9 JP (HL)     */ cpu => inst.JP_$RR(cpu, 'HL'),
    /* 0xEA LD (a16),A  */ cpu => inst.LD8_$a16_R(cpu, 'A'),
    /* 0xEB NOT_IMPL    */ cpu => inst.NOT_IMPLEMENTED(cpu, '0xEB'),
    /* 0xEC NOT_IMPL    */ cpu => inst.NOT_IMPLEMENTED(cpu, '0xEC'),
    /* 0xED NOT_IMPL    */ cpu => inst.NOT_IMPLEMENTED(cpu, '0xED'),
    /* 0xEE XOR d8      */ cpu => inst.XOR8_d8(cpu),
    /* 0xEF RST 28H     */ cpu => inst.RST_XXH(cpu, 0x28),

    // OFFSET 0xF0 ----------------------------------------------------------
    /* 0xF0 LDH A,(a8)  */ cpu => inst.LD8H_R_$a8(cpu, 'A'),
    /* 0xF1 POP AF      */ cpu => inst.POP16_RR(cpu, 'AF'),
    /* 0xF2 LD A,(C)    */ cpu => inst.LD8_R_$R(cpu, 'A', 'C'),
    /* 0xF3 DI          */ cpu => inst.DI(cpu),
    /* 0xF4 NOT_IMPL    */ cpu => inst.NOT_IMPLEMENTED(cpu, '0xF4'),
    /* 0xF5 PUSH AF     */ cpu => inst.PUSH16_RR(cpu, 'AF'),
    /* 0xF6 OR d8       */ cpu => inst.OR8_d8(cpu),
    /* 0xF7 RST 30H     */ cpu => inst.RST_XXH(cpu, 0x30),
    /* 0xF8 LD HL,SP+r8 */ cpu => inst.LD16_RR_SPpr8(cpu, 'HL'),
    /* 0xF9 LD SP,HL    */ cpu => inst.LD16_SP_RR(cpu, 'HL'),
    /* 0xFA LD A,(a16)  */ cpu => inst.LD8_R_$a16(cpu, 'A'),
    /* 0xFB EI          */ cpu => inst.EI(cpu),
    /* 0xFC NOT_IMPL    */ cpu => inst.NOT_IMPLEMENTED(cpu, '0xFC'),
    /* 0xFD NOT_IMPL    */ cpu => inst.NOT_IMPLEMENTED(cpu, '0xFD'),
    /* 0xFE CP d8       */ cpu => inst.CP8_d8(cpu),
    /* 0xFF RST 38H     */ cpu => inst.RST_XXH(cpu, 0x38),
];

const getOpcodeLabel = (address, cpu) => {
  const labels = [
    // OFFSET 0x00 ----------------------------------------------------------
    `NOP`,
    `LD BC,d16`,
    `LD (BC),A`,
    `INC BC`,
    `INC B`,
    `DEC B`,
    `LD B,d8`,
    `LD B,d8`,
    `LD (a16),SP`,
    `ADD HL,BC`,
    `LD A,(BC)`,
    `DEC BC`,
    `INC C`,
    `DEC C`,
    `LD C,d8`,
    `RRCA`,

    // OFFSET 0x10 ----------------------------------------------------------
    `STOP 0`,
    `LD DE,d16`,
    `LD (DE),A`,
    `INC DE`,
    `INC D`,
    `DEC D`,
    `LD D,d8`,
    `RLA`,
    `JR r8`,
    `ADD HL,DE`,
    `LD A,(DE)`,
    `DEC DE`,
    `INC E`,
    `DEC E`,
    `LD E,d8`,
    `RRA`,

    // OFFSET 0x20 ----------------------------------------------------------
    `JR NZ,r8`,
    `LD HL,d16`,
    `LD (HL+),A`,
    `INC HL`,
    `INC H`,
    `DEC H`,
    `LD H,d8`,
    `DAA`,
    `JR Z,r8`,
    `ADD HL,HL`,
    `LD A,(HL+)`,
    `DEC HL`,
    `INC L`,
    `DEC L`,
    `LD L,d8`,
    `CPL`,

    // OFFSET 0x30 ----------------------------------------------------------
    `JR NC,r8`,
    `LD SP,d16`,
    `LD (HL-),A`,
    `INC SP`,
    `INC (HL)`,
    `DEC (HL)`,
    `LD (HL),d8`,
    `SCF`,
    `JR C,r8`,
    `ADD HL,SP`,
    `LD A,(HL-)`,
    `DEC SP`,
    `INC A`,
    `DEC A`,
    `LD A,d8`,
    `CCF`,

    // OFFSET 0x40 ----------------------------------------------------------
    `LD B,B`,
    `LD B,C`,
    `LD B,D`,
    `LD B,E`,
    `LD B,H`,
    `LD B,L`,
    `LD B,(HL)`,
    `LD B,A`,
    `LD C,B`,
    `LD C,C`,
    `LD C,D`,
    `LD C,E`,
    `LD C,H`,
    `LD C,L`,
    `LD C,(HL)`,
    `LD C,A`,

    // OFFSET 0x50 ----------------------------------------------------------
    `LD D,B`,
    `LD D,C`,
    `LD D,D`,
    `LD D,E`,
    `LD D,H`,
    `LD D,L`,
    `LD D,(HL)`,
    `LD D,A`,
    `LD E,B`,
    `LD E,C`,
    `LD E,D`,
    `LD E,E`,
    `LD E,H`,
    `LD E,L`,
    `LD E,(HL)`,
    `LD E,A`,

    // OFFSET 0x60 ----------------------------------------------------------
    `LD H,B`,
    `LD H,C`,
    `LD H,D`,
    `LD H,E`,
    `LD H,H`,
    `LD H,L`,
    `LD H,(HL)`,
    `LD H,A`,
    `LD L,B`,
    `LD L,C`,
    `LD L,D`,
    `LD L,E`,
    `LD L,H`,
    `LD L,L`,
    `LD L,(HL)`,
    `LD L,A`,

    // OFFSET 0x70 ----------------------------------------------------------
    `LD (HL),B`,
    `LD (HL),C`,
    `LD (HL),D`,
    `LD (HL),E`,
    `LD (HL),H`,
    `LD (HL),L`,
    `HALT`,
    `LD (HL),A`,
    `LD A,B`,
    `LD A,C`,
    `LD A,D`,
    `LD A,E`,
    `LD A,H`,
    `LD A,L`,
    `LD A,(HL)`,
    `LD A,A`,

    // OFFSET 0x80 ----------------------------------------------------------
    `ADD A,B`,
    `ADD A,C`,
    `ADD A,D`,
    `ADD A,E`,
    `ADD A,H`,
    `ADD A,L`,
    `ADD A,(HL)`,
    `ADD A,A`,
    `ADC A,B`,
    `ADC A,C`,
    `ADC A,D`,
    `ADC A,E`,
    `ADC A,H`,
    `ADC A,L`,
    `ADC A,(HL)`,
    `ADC A,A`,

    // OFFSET 0x90 ----------------------------------------------------------
    `SUB B`,
    `SUB C`,
    `SUB D`,
    `SUB E`,
    `SUB H`,
    `SUB L`,
    `SUB (HL)`,
    `SUB A`,
    `SBC A,B`,
    `SBC A,C`,
    `SBC A,D`,
    `SBC A,E`,
    `SBC A,H`,
    `SBC A,L`,
    `SBC A,(HL)`,
    `SBC A,A`,

    // OFFSET 0xA0 ----------------------------------------------------------
    `AND B`,
    `AND C`,
    `AND D`,
    `AND E`,
    `AND H`,
    `AND L`,
    `AND (HL)`,
    `AND A`,
    `XOR B`,
    `XOR C`,
    `XOR D`,
    `XOR E`,
    `XOR H`,
    `XOR L`,
    `XOR (HL)`,
    `XOR A`,

    // OFFSET 0xB0 ----------------------------------------------------------
    `OR B`,
    `OR C`,
    `OR D`,
    `OR E`,
    `OR H`,
    `OR L`,
    `OR (HL)`,
    `OR A`,
    `CP B`,
    `CP C`,
    `CP D`,
    `CP E`,
    `CP H`,
    `CP L`,
    `CP (HL)`,
    `CP A`,

    // OFFSET 0xC0 ----------------------------------------------------------
    `RET NZ`,
    `POP BC`,
    `JP NZ,a16`,
    `JP a16`,
    `CALL NZ,a16`,
    `PUSH BC`,
    `ADD A,d8`,
    `RST 00H`,
    `RET Z`,
    `RET`,
    `JP Z,a16`,
    `(PRE CB) ${getPrefixCBOpcodeLabel(cpu.readAddress8(cpu.getPC() + 1))}`,
    `CALL Z,a16`,
    `CALL a16`,
    `ADC A,d8`,
    `RST 08H`,

    // OFFSET 0xD0 ----------------------------------------------------------
    `RET NC`,
    `POP DE`,
    `JP NC,a16`,
    `NOT_IMPL`,
    `CALL NC,a16`,
    `PUSH DE`,
    `SUB d8`,
    `RST 10H`,
    `RET C`,
    `RETI`,
    `JP C,a16`,
    `NOT_IMPL`,
    `CALL C,a16`,
    `NOT_IMPL`,
    `SBC A,d8`,
    `RST 18H`,

    // OFFSET 0xE0 ----------------------------------------------------------
    `LDH (a8),A`,
    `POP HL`,
    `LD (C),A`,
    `NOT_IMPL`,
    `NOT_IMPL`,
    `PUSH HL`,
    `AND d8`,
    `RST 20H`,
    `ADD SP,r8`,
    `JP (HL)`,
    `LD (a16),A`,
    `NOT_IMPL`,
    `NOT_IMPL`,
    `NOT_IMPL`,
    `XOR d8`,
    `RST 28H`,

    // OFFSET 0xF0 ----------------------------------------------------------
    `LDH A,(a8)`,
    `POP AF`,
    `LD A,(C)`,
    `DI`,
    `NOT_IMPL`,
    `PUSH AF`,
    `OR d8`,
    `RST 30H`,
    `LD HL,SP+r8`,
    `LD SP,HL`,
    `LD A,(a16)`,
    `EI`,
    `NOT_IMPL`,
    `NOT_IMPL`,
    `CP d8`,
    `RST 38H`,
  ];

  const opcode = cpu.readAddress8(address);
  return labels[opcode];
};

const getOpcodeLabels = (base, cpu) => {
  const A = format(base, cpu.readReg8('A'));
  const B = format(base, cpu.readReg8('B'));
  const C = format(base, cpu.readReg8('C'));
  const D = format(base, cpu.readReg8('D'));
  const E = format(base, cpu.readReg8('E'));
  const H = format(base, cpu.readReg8('H'));
  const L = format(base, cpu.readReg8('L'));

  const AF = format(base, cpu.readReg16('AF'), 16);
  const BC = format(base, cpu.readReg16('BC'), 16);
  const DE = format(base, cpu.readReg16('DE'), 16);
  const HL = format(base, cpu.readReg16('HL'), 16);
  const PCp2 = format(base, cpu.getPC() + 2, 16);
  const SP = format(base, cpu.getSP(), 16);

  const signedImm = cpu.readSignedImmediate8();

  const d8 = format(base, cpu.readImmediate8());
  const r8 = `${PCp2}${signedImm > 0 ? '+' : '-'}${format(
    base,
    Math.abs(signedImm)
  )}`;
  const d16 = format(base, cpu.readImmediate16(), 16);
  const a8 = `0xFF00+${format(base, +cpu.readImmediate8(), 8)}`;
  const a16 = format(base, cpu.readImmediate16(), 16);

  const Zflag = cpu.getFlag('Z') ? true : false;
  const Cflag = cpu.getFlag('C') ? true : false;
  const NZflag = !Zflag;
  const NCflag = !Cflag;

  const labelsWithPartialValues = [
    // OFFSET 0x00 ----------------------------------------------------------
    `NOP`,
    `LD BC,${d16}`,
    `LD (${BC}),${A}`,
    `INC BC`,
    `INC B`,
    `DEC B`,
    `LD B,${d8}`,
    `LD B,${d8}`,
    `LD (${a16}),${SP}`,
    `ADD HL,${BC}`,
    `LD A,(${BC})`,
    `DEC BC`,
    `INC C`,
    `DEC C`,
    `LD C,${d8}`,
    `RRCA`,

    // OFFSET 0x10 ----------------------------------------------------------
    `STOP 0`,
    `LD DE,${d16}`,
    `LD (${DE}),${A}`,
    `INC DE`,
    `INC D`,
    `DEC D`,
    `LD D,${d8}`,
    `RLA`,
    `JR ${r8}`,
    `ADD HL,${DE}`,
    `LD A,(${DE})`,
    `DEC DE`,
    `INC E`,
    `DEC E`,
    `LD E,${d8}`,
    `RRA`,

    // OFFSET 0x20 ----------------------------------------------------------
    `JR ${NZflag},${r8}`,
    `LD HL,${d16}`,
    `LD (${HL}+),${A}`,
    `INC HL`,
    `INC H`,
    `DEC H`,
    `LD H,${d8}`,
    `DAA`,
    `JR ${Zflag},${r8}`,
    `ADD HL,${HL}`,
    `LD A,(${HL}+)`,
    `DEC HL`,
    `INC L`,
    `DEC L`,
    `LD L,${d8}`,
    `CPL`,

    // OFFSET 0x30 ----------------------------------------------------------
    `JR ${NCflag},${r8}`,
    `LD SP,${d16}`,
    `LD (${HL}-),${A}`,
    `INC SP`,
    `INC (${HL})`,
    `DEC (${HL})`,
    `LD (${HL}),${d8}`,
    `SCF`,
    `JR ${Cflag},${r8}`,
    `ADD HL,${SP}`,
    `LD A,(${HL}-)`,
    `DEC SP`,
    `INC A`,
    `DEC A`,
    `LD A,${d8}`,
    `CCF`,

    // OFFSET 0x40 ----------------------------------------------------------
    `LD B,${B}`,
    `LD B,${C}`,
    `LD B,${D}`,
    `LD B,${E}`,
    `LD B,${H}`,
    `LD B,${L}`,
    `LD B,(${HL})`,
    `LD B,${A}`,
    `LD C,${B}`,
    `LD C,${C}`,
    `LD C,${D}`,
    `LD C,${E}`,
    `LD C,${H}`,
    `LD C,${L}`,
    `LD C,(${HL})`,
    `LD C,${A}`,

    // OFFSET 0x50 ----------------------------------------------------------
    `LD D,${B}`,
    `LD D,${C}`,
    `LD D,${D}`,
    `LD D,${E}`,
    `LD D,${H}`,
    `LD D,${L}`,
    `LD D,(${HL})`,
    `LD D,${A}`,
    `LD E,${B}`,
    `LD E,${C}`,
    `LD E,${D}`,
    `LD E,${E}`,
    `LD E,${H}`,
    `LD E,${L}`,
    `LD E,(${HL})`,
    `LD E,${A}`,

    // OFFSET 0x60 ----------------------------------------------------------
    `LD H,${B}`,
    `LD H,${C}`,
    `LD H,${D}`,
    `LD H,${E}`,
    `LD H,${H}`,
    `LD H,${L}`,
    `LD H,(${HL})`,
    `LD H,${A}`,
    `LD L,${B}`,
    `LD L,${C}`,
    `LD L,${D}`,
    `LD L,${E}`,
    `LD L,${H}`,
    `LD L,${L}`,
    `LD L,(${HL})`,
    `LD L,${A}`,

    // OFFSET 0x70 ----------------------------------------------------------
    `LD (${HL}),${B}`,
    `LD (${HL}),${C}`,
    `LD (${HL}),${D}`,
    `LD (${HL}),${E}`,
    `LD (${HL}),${H}`,
    `LD (${HL}),${L}`,
    `HALT`,
    `LD (${HL}),${A}`,
    `LD A,${B}`,
    `LD A,${C}`,
    `LD A,${D}`,
    `LD A,${E}`,
    `LD A,${H}`,
    `LD A,${L}`,
    `LD A,(${HL})`,
    `LD A,${A}`,

    // OFFSET 0x80 ----------------------------------------------------------
    `ADD A,${B}`,
    `ADD A,${C}`,
    `ADD A,${D}`,
    `ADD A,${E}`,
    `ADD A,${H}`,
    `ADD A,${L}`,
    `ADD A,(${HL})`,
    `ADD A,${A}`,
    `ADC A,${B}`,
    `ADC A,${C}`,
    `ADC A,${D}`,
    `ADC A,${E}`,
    `ADC A,${H}`,
    `ADC A,${L}`,
    `ADC A,(${HL})`,
    `ADC A,${A}`,

    // OFFSET 0x90 ----------------------------------------------------------
    `SUB B`,
    `SUB C`,
    `SUB D`,
    `SUB E`,
    `SUB H`,
    `SUB L`,
    `SUB (${HL})`,
    `SUB A`,
    `SBC A,${B}`,
    `SBC A,${C}`,
    `SBC A,${D}`,
    `SBC A,${E}`,
    `SBC A,${H}`,
    `SBC A,${L}`,
    `SBC A,(${HL})`,
    `SBC A,${A}`,

    // OFFSET 0xA0 ----------------------------------------------------------
    `AND B`,
    `AND C`,
    `AND D`,
    `AND E`,
    `AND H`,
    `AND L`,
    `AND (${HL})`,
    `AND A`,
    `XOR B`,
    `XOR C`,
    `XOR D`,
    `XOR E`,
    `XOR H`,
    `XOR L`,
    `XOR (${HL})`,
    `XOR A`,

    // OFFSET 0xB0 ----------------------------------------------------------
    `OR B`,
    `OR C`,
    `OR D`,
    `OR E`,
    `OR H`,
    `OR L`,
    `OR (${HL})`,
    `OR A`,
    `CP B`,
    `CP C`,
    `CP D`,
    `CP E`,
    `CP H`,
    `CP L`,
    `CP (${HL})`,
    `CP A`,

    // OFFSET 0xC0 ----------------------------------------------------------
    `RET ${NZflag}`,
    `POP BC <- ${BC}`,
    `JP ${NZflag},${a16}`,
    `JP ${a16}`,
    `CALL ${NZflag},${a16}`,
    `PUSH ${BC}`,
    `ADD A,${d8}`,
    `RST 00H`,
    `RET Z`,
    `RET`,
    `JP ${Zflag},${a16}`,
    `(PRE CB) ${getPrefixCBOpcodeLabels(base, cpu)[1]}`,
    `CALL ${Zflag},${a16}`,
    `CALL ${a16}`,
    `ADC A,${d8}`,
    `RST 08H`,

    // OFFSET 0xD0 ----------------------------------------------------------
    `RET ${NCflag}`,
    `POP DE <- ${DE}`,
    `JP ${NCflag},${a16}`,
    `NOT_IMPL`,
    `CALL ${NCflag},${a16}`,
    `PUSH ${DE}`,
    `SUB ${d8}`,
    `RST 10H`,
    `RET ${Cflag}`,
    `RETI`,
    `JP ${Cflag},${a16}`,
    `NOT_IMPL`,
    `CALL ${Cflag},${a16}`,
    `NOT_IMPL`,
    `SBC A,${d8}`,
    `RST 18H`,

    // OFFSET 0xE0 ----------------------------------------------------------
    `LDH (${a8}),${A}`,
    `POP HL <- ${HL}`,
    `LD (0xFF00+${C}),${A}`,
    `NOT_IMPL`,
    `NOT_IMPL`,
    `PUSH ${HL}`,
    `AND ${d8}`,
    `RST 20H`,
    `ADD SP,${r8}`,
    `JP (${HL})`,
    `LD (${a16}),${A}`,
    `NOT_IMPL`,
    `NOT_IMPL`,
    `NOT_IMPL`,
    `XOR ${d8}`,
    `RST 28H`,

    // OFFSET 0xF0 ----------------------------------------------------------
    `LDH A,(${a8})`,
    `POP AF <- ${AF}`,
    `LD A,(${C}+0xFF00)`,
    `DI`,
    `NOT_IMPL`,
    `PUSH ${AF}`,
    `OR ${d8}`,
    `RST 30H`,
    `LD HL,${SP}+${r8}`,
    `LD SP,${HL}`,
    `LD A,(${a16})`,
    `EI`,
    `NOT_IMPL`,
    `NOT_IMPL`,
    `CP ${d8}`,
    `RST 38H`,
  ];

  const $RR = (reg16) =>
    format(base, cpu.readAddress8(cpu.readReg16(reg16)), 8);
  const r8Value = format(
    base,
    cpu.getPC() + 2 + cpu.readSignedImmediate8(),
    16
  );
  const a8Value = format(base, 0xff00 + cpu.readImmediate8(), 16);
  const Cpff = format(base, 0xff00 + cpu.readReg8('C'), 16);

  const labelsWithValues = [
    // OFFSET 0x00 ----------------------------------------------------------
    `NOP`,
    `LD BC,${d16}`,
    `LD (${BC}),${A}`,
    `INC BC`,
    `INC B`,
    `DEC B`,
    `LD B,${d8}`,
    `LD B,${d8}`,
    `LD (${a16}),${SP}`,
    `ADD HL,${BC}`,
    `LD A,${$RR('BC')}`,
    `DEC BC`,
    `INC C`,
    `DEC C`,
    `LD C,${d8}`,
    `RRCA`,

    // OFFSET 0x10 ----------------------------------------------------------
    `STOP 0`,
    `LD DE,${d16}`,
    `LD (${DE}),${A}`,
    `INC DE`,
    `INC D`,
    `DEC D`,
    `LD D,${d8}`,
    `RLA`,
    `JR ${r8Value}`,
    `ADD HL,${DE}`,
    `LD A,${$RR('DE')}`,
    `DEC DE`,
    `INC E`,
    `DEC E`,
    `LD E,${d8}`,
    `RRA`,

    // OFFSET 0x20 ----------------------------------------------------------
    `JR ${NZflag},${r8Value}`,
    `LD HL,${d16}`,
    `LD (${HL}+),${A}`,
    `INC HL`,
    `INC H`,
    `DEC H`,
    `LD H,${d8}`,
    `DAA`,
    `JR ${Zflag},${r8Value}`,
    `ADD HL,${HL}`,
    `LD A,${$RR('HL')}+`,
    `DEC HL`,
    `INC L`,
    `DEC L`,
    `LD L,${d8}`,
    `CPL`,

    // OFFSET 0x30 ----------------------------------------------------------
    `JR ${NCflag},${r8Value}`,
    `LD SP,${d16}`,
    `LD (${HL}-),${A}`,
    `INC SP`,
    `INC (${HL}})`,
    `DEC (${HL}})`,
    `LD (${HL}),${d8}`,
    `SCF`,
    `JR ${Cflag},${r8Value}`,
    `ADD HL,${SP}`,
    `LD A,${$RR('HL')}-`,
    `DEC SP`,
    `INC A`,
    `DEC A`,
    `LD A,${d8}`,
    `CCF`,

    // OFFSET 0x40 ----------------------------------------------------------
    `LD B,${B}`,
    `LD B,${C}`,
    `LD B,${D}`,
    `LD B,${E}`,
    `LD B,${H}`,
    `LD B,${L}`,
    `LD B,${$RR('HL')}`,
    `LD B,${A}`,
    `LD C,${B}`,
    `LD C,${C}`,
    `LD C,${D}`,
    `LD C,${E}`,
    `LD C,${H}`,
    `LD C,${L}`,
    `LD C,${$RR('HL')}`,
    `LD C,${A}`,

    // OFFSET 0x50 ----------------------------------------------------------
    `LD D,${B}`,
    `LD D,${C}`,
    `LD D,${D}`,
    `LD D,${E}`,
    `LD D,${H}`,
    `LD D,${L}`,
    `LD D,${$RR('HL')}`,
    `LD D,${A}`,
    `LD E,${B}`,
    `LD E,${C}`,
    `LD E,${D}`,
    `LD E,${E}`,
    `LD E,${H}`,
    `LD E,${L}`,
    `LD E,${$RR('HL')}`,
    `LD E,${A}`,

    // OFFSET 0x60 ----------------------------------------------------------
    `LD H,${B}`,
    `LD H,${C}`,
    `LD H,${D}`,
    `LD H,${E}`,
    `LD H,${H}`,
    `LD H,${L}`,
    `LD H,${$RR('HL')}`,
    `LD H,${A}`,
    `LD L,${B}`,
    `LD L,${C}`,
    `LD L,${D}`,
    `LD L,${E}`,
    `LD L,${H}`,
    `LD L,${L}`,
    `LD L,${$RR('HL')}`,
    `LD L,${A}`,

    // OFFSET 0x70 ----------------------------------------------------------
    `LD (${HL}),${B}`,
    `LD (${HL}),${C}`,
    `LD (${HL}),${D}`,
    `LD (${HL}),${E}`,
    `LD (${HL}),${H}`,
    `LD (${HL}),${L}`,
    `HALT`,
    `LD (${HL}),${A}`,
    `LD A,${B}`,
    `LD A,${C}`,
    `LD A,${D}`,
    `LD A,${E}`,
    `LD A,${H}`,
    `LD A,${L}`,
    `LD A,${$RR('HL')}`,
    `LD A,${A}`,

    // OFFSET 0x80 ----------------------------------------------------------
    `ADD A,${B}`,
    `ADD A,${C}`,
    `ADD A,${D}`,
    `ADD A,${E}`,
    `ADD A,${H}`,
    `ADD A,${L}`,
    `ADD A,${$RR('HL')}`,
    `ADD A,${A}`,
    `ADC A,${B}`,
    `ADC A,${C}`,
    `ADC A,${D}`,
    `ADC A,${E}`,
    `ADC A,${H}`,
    `ADC A,${L}`,
    `ADC A,${$RR('HL')}`,
    `ADC A,${A}`,

    // OFFSET 0x90 ----------------------------------------------------------
    `SUB B`,
    `SUB C`,
    `SUB D`,
    `SUB E`,
    `SUB H`,
    `SUB L`,
    `SUB ${$RR('HL')}`,
    `SUB A`,
    `SBC A,${B}`,
    `SBC A,${C}`,
    `SBC A,${D}`,
    `SBC A,${E}`,
    `SBC A,${H}`,
    `SBC A,${L}`,
    `SBC A,${$RR('HL')}`,
    `SBC A,${A}`,

    // OFFSET 0xA0 ----------------------------------------------------------
    `AND B`,
    `AND C`,
    `AND D`,
    `AND E`,
    `AND H`,
    `AND L`,
    `AND ${$RR('HL')}`,
    `AND A`,
    `XOR B`,
    `XOR C`,
    `XOR D`,
    `XOR E`,
    `XOR H`,
    `XOR L`,
    `XOR ${$RR('HL')}`,
    `XOR A`,

    // OFFSET 0xB0 ----------------------------------------------------------
    `OR B`,
    `OR C`,
    `OR D`,
    `OR E`,
    `OR H`,
    `OR L`,
    `OR ${$RR('HL')}`,
    `OR A`,
    `CP B`,
    `CP C`,
    `CP D`,
    `CP E`,
    `CP H`,
    `CP L`,
    `CP ${$RR('HL')}`,
    `CP A`,

    // OFFSET 0xC0 ----------------------------------------------------------
    `RET ${NZflag}`,
    `POP BC <- ${BC}`,
    `JP ${NZflag},${a16}`,
    `JP ${a16}`,
    `CALL ${NZflag},${a16}`,
    `PUSH ${BC}`,
    `ADD A,${d8}`,
    `RST 00H`,
    `RET Z`,
    `RET`,
    `JP ${Zflag},${a16}`,
    `(PRE CB) ${getPrefixCBOpcodeLabels(base, cpu)[1]}`,
    `CALL ${Zflag},${a16}`,
    `CALL ${a16}`,
    `ADC A,${d8}`,
    `RST 08H`,

    // OFFSET 0xD0 ----------------------------------------------------------
    `RET ${NCflag}`,
    `POP DE <- ${DE}`,
    `JP ${NCflag},${a16}`,
    `NOT_IMPL`,
    `CALL ${NCflag},${a16}`,
    `PUSH ${DE}`,
    `SUB ${d8}`,
    `RST 10H`,
    `RET ${Cflag}`,
    `RETI`,
    `JP ${Cflag},${a16}`,
    `NOT_IMPL`,
    `CALL ${Cflag},${a16}`,
    `NOT_IMPL`,
    `SBC A,${d8}`,
    `RST 18H`,

    // OFFSET 0xE0 ----------------------------------------------------------
    `LDH (${a8Value}),${A}`,
    `POP HL <- ${HL}`,
    `LD (${Cpff}),${A}`,
    `NOT_IMPL`,
    `NOT_IMPL`,
    `PUSH ${HL}`,
    `AND ${d8}`,
    `RST 20H`,
    `ADD SP,${r8Value}`,
    `JP (${HL})`,
    `LD (${a16}),${A}`,
    `NOT_IMPL`,
    `NOT_IMPL`,
    `NOT_IMPL`,
    `XOR ${d8}`,
    `RST 28H`,

    // OFFSET 0xF0 ----------------------------------------------------------
    `LDH A,(${a8Value})`,
    `POP AF <- ${AF}`,
    `LD A,(${Cpff})`,
    `DI`,
    `NOT_IMPL`,
    `PUSH ${AF}`,
    `OR ${d8}`,
    `RST 30H`,
    `LD HL,${SP}+${r8}`,
    `LD SP,${HL}`,
    `LD A,(${a16})`,
    `EI`,
    `NOT_IMPL`,
    `NOT_IMPL`,
    `CP ${d8}`,
    `RST 38H`,
  ];

  const pc = cpu.getPC();
  const opcode = cpu.readAddress8(pc);
  return [
    getOpcodeLabel(pc, cpu),
    labelsWithPartialValues[opcode],
    labelsWithValues[opcode],
  ];
};

export default opcodesMap;
export { getOpcodeLabel, getOpcodeLabels };
